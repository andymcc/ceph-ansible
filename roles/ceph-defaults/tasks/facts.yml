---
- name: set_fact monitor_name ansible_hostname
  set_fact:
    monitor_name: "{{ ansible_hostname }}"
  when:
    - not mon_use_fqdn

- name: set_fact monitor_name ansible_fqdn
  set_fact:
    monitor_name: "{{ ansible_fqdn }}"
  when:
    - mon_use_fqdn

- name: set_fact docker_exec_cmd
  set_fact:
    docker_exec_cmd: "docker exec ceph-mon-{{ hostvars[groups[mon_group_name][0]]['ansible_hostname'] }}"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  when:
    - containerized_deployment

# for rolling updates we should delegate to not the current host if the
# current host is mon_group_name[0] since it will be unavailable
- name: is ceph running already?
  command: "timeout 5 {{ docker_exec_cmd }} ceph --cluster {{ cluster }} fsid"
  changed_when: false
  failed_when: false
  check_mode: no
  register: ceph_current_fsid
  delegate_to: "{{ (inventory_hostname == groups[mon_group_name][0]) | ternary(groups[mon_group_name][-1], groups[mon_group_name][0]) }}"
  run_once: true

- name: debug var cluser_uuid
  debug:
    var: cluster_uuid

- name: debug var ceph_current_fsid
  debug:
    var: ceph_current_fsid

- name: debug var fsid
  debug:
    var: fsid

- name: generate cluster fsid
  local_action:
    module: shell
      python -c 'import uuid; print(str(uuid.uuid4()))'
  register: cluster_uuid
  run_once: true
  become: false
  when:
    - generate_fsid
    - ceph_current_fsid.rc != 0
    - hostvars['localhost']['fsid'] is undefined

- name: shares facts for cluster_uuid fsid and ceph_current_fsid
  set_fact:
    ceph_current_fsid: "{{ ceph_current_fsid }}"
    fsid: "{{ (ceph_current_fsid.rc == 0) | ternary(ceph_current_fsid.stdout, cluster_uuid.stdout | default('')) }}"
  delegate_to: localhost
  run_once: true
  when:
    - generate_fsid or (ceph_current_fsid.rc == 0)

- name: Set the fact locally
  set_fact:
    ceph_current_fsid: "{{ hostvars['localhost']['ceph_current_fsid'] }}"
    fsid: "{{ hostvars['localhost']['fsid'] }}"
  when:
    - generate_fsid or (ceph_current_fsid.rc == 0)

# We want this check to be run only on the first node
- name: check if {{ fetch_directory }} directory exists
  local_action:
    module: stat
    path: "{{ fetch_directory }}/monitor_keyring.conf"
  become: false
  register: monitor_keyring_conf
  run_once: true

- name: create a local fetch directory if it does not exist
  local_action:
    module: file
    path: "{{ fetch_directory }}"
    state: directory
  changed_when: false
  become: false
  run_once: true
  when:
    - (cephx or generate_fsid)

# Set ceph_release to ceph_stable by default
- name: set_fact ceph_release ceph_stable_release
  set_fact:
    ceph_release: "{{ ceph_stable_release }}"

- name: set_fact mds_name ansible_hostname
  set_fact:
    mds_name: "{{ ansible_hostname }}"
  when:
    - not mds_use_fqdn

- name: set_fact mds_name ansible_fqdn
  set_fact:
    mds_name: "{{ ansible_fqdn }}"
  when:
    - mds_use_fqdn

- name: set_fact rbd_client_directory_owner ceph
  set_fact:
    rbd_client_directory_owner: ceph
  when:
    - rbd_client_directory_owner is not defined
      or not rbd_client_directory_owner

- name: set_fact rbd_client_directory_group rbd_client_directory_group
  set_fact:
    rbd_client_directory_group: ceph
  when:
    - rbd_client_directory_group is not defined
      or not rbd_client_directory_group

- name: set_fact rbd_client_directory_mode 0770
  set_fact:
    rbd_client_directory_mode: "0770"
  when:
    - rbd_client_directory_mode is not defined
      or not rbd_client_directory_mode

- name: resolve device link(s)
  command: readlink -f {{ item }}
  changed_when: false
  with_items: "{{ devices }}"
  register: devices_prepare_canonicalize
  when:
    - inventory_hostname in groups.get(osd_group_name, [])
    - not osd_auto_discovery|default(False)
    - osd_scenario|default('dummy') != 'lvm'

- name: set_fact build devices from resolved symlinks
  set_fact:
    devices: "{{ devices | default([]) + [ item.stdout ] }}"
  with_items: "{{ devices_prepare_canonicalize.results }}"
  when:
    - inventory_hostname in groups.get(osd_group_name, [])
    - not osd_auto_discovery|default(False)
    - osd_scenario|default('dummy') != 'lvm'

- name: set_fact build final devices list
  set_fact:
    devices: "{{ devices | reject('search','/dev/disk') | list | unique }}"
  when:
    - inventory_hostname in groups.get(osd_group_name, [])
    - not osd_auto_discovery|default(False)
    - osd_scenario|default('dummy') != 'lvm'

- name: set_fact ceph_uid for Debian based system
  set_fact:
    ceph_uid: 64045
  when:
    - containerized_deployment
    - ceph_docker_image_tag | search("latest") or ceph_docker_image_tag | search("ubuntu")

- name: set_fact ceph_uid for Red Hat based system
  set_fact:
    ceph_uid: 167
  when:
    - containerized_deployment
    - ceph_docker_image_tag | search("centos") or ceph_docker_image | search("rhceph") or ceph_docker_image_tag | search("fedora")
